// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartPocketAPI.Database;

#nullable disable

namespace SmartPocketAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250216075009_nextrp")]
    partial class nextrp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartPocketAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionSpanish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSpanish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            DescriptionSpanish = "",
                            IsDefault = true,
                            Name = "Food",
                            NameSpanish = "Comida",
                            UserId = new Guid("95eb5d5b-dd03-4c31-8a59-80d59b73df7c")
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            DescriptionSpanish = "",
                            IsDefault = true,
                            Name = "Gas",
                            NameSpanish = "Gasolina",
                            UserId = new Guid("95eb5d5b-dd03-4c31-8a59-80d59b73df7c")
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            DescriptionSpanish = "",
                            IsDefault = true,
                            Name = "Hobbies",
                            NameSpanish = "Hobbies",
                            UserId = new Guid("95eb5d5b-dd03-4c31-8a59-80d59b73df7c")
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            DescriptionSpanish = "",
                            IsDefault = true,
                            Name = "Shopping",
                            NameSpanish = "Compras",
                            UserId = new Guid("95eb5d5b-dd03-4c31-8a59-80d59b73df7c")
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            DescriptionSpanish = "",
                            IsDefault = true,
                            Name = "Bank",
                            NameSpanish = "Bancarios",
                            UserId = new Guid("95eb5d5b-dd03-4c31-8a59-80d59b73df7c")
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            DescriptionSpanish = "",
                            IsDefault = true,
                            Name = "Others",
                            NameSpanish = "Otros",
                            UserId = new Guid("95eb5d5b-dd03-4c31-8a59-80d59b73df7c")
                        });
                });

            modelBuilder.Entity("SmartPocketAPI.Models.Frequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSpanish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Frequency", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Daily",
                            NameSpanish = "Diario"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Weekly",
                            NameSpanish = "Semanal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Monthly",
                            NameSpanish = "Mensual"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bimonthly",
                            NameSpanish = "Bimestral"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Quarter",
                            NameSpanish = "Trimestral"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Anual",
                            NameSpanish = "Anual"
                        });
                });

            modelBuilder.Entity("SmartPocketAPI.Models.Movement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreditCardPaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InstallmentNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("RecurringPaymentId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreditCardPaymentId");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("RecurringPaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Movement", (string)null);
                });

            modelBuilder.Entity("SmartPocketAPI.Models.MovementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSpanish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MovementType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Paymenty",
                            NameSpanish = "Pago"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Income",
                            NameSpanish = "Ingreso"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Purchase",
                            NameSpanish = "Compra"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Credit Card Payment",
                            NameSpanish = "Pago a Tarjeta de Credito"
                        });
                });

            modelBuilder.Entity("SmartPocketAPI.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DefaultInterestRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DueDate")
                        .HasColumnType("int");

                    b.Property<bool>("IsCreditCard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionDate")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethod", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bank = "",
                            DefaultInterestRate = 0m,
                            DueDate = 4,
                            IsCreditCard = false,
                            IsDefault = true,
                            Name = "Cash",
                            PaymentMethodTypeId = 1,
                            TransactionDate = 15,
                            UserId = new Guid("95eb5d5b-dd03-4c31-8a59-80d59b73df7c")
                        });
                });

            modelBuilder.Entity("SmartPocketAPI.Models.PaymentMethodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameSpanish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethodType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cash",
                            NameSpanish = "Efectivo"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Credit Card",
                            NameSpanish = "Tarjeta de Credito"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Debit Card",
                            NameSpanish = "Tarjeta de Debito"
                        });
                });

            modelBuilder.Entity("SmartPocketAPI.Models.RecurringPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreditCardPaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("FrecuencyId")
                        .HasColumnType("int");

                    b.Property<decimal>("InstallmentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InstallmentAmountPerPeriod")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InstallmentCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInterestFreePayment")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("LastInstallmentDate")
                        .HasColumnType("date");

                    b.Property<int>("MovementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("NextInstallmentCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("NextInstallmentDate")
                        .HasColumnType("date");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreditCardPaymentId");

                    b.HasIndex("FrecuencyId");

                    b.HasIndex("MovementTypeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("RecurringPayment", (string)null);
                });

            modelBuilder.Entity("SmartPocketAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VerifyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("95eb5d5b-dd03-4c31-8a59-80d59b73df7c"),
                            Email = "admin@admin.com",
                            IsAdmin = true,
                            IsPremium = true,
                            Name = "Admin",
                            Password = "5IrYpxI+Y3DE8f6ZP6y1qw==:dR01XFPGqVy+ZUb/7gsPLGX7NkpY0dcgzPjgyUT22r8=",
                            VerifyCode = ""
                        });
                });

            modelBuilder.Entity("SmartPocketAPI.Models.Category", b =>
                {
                    b.HasOne("SmartPocketAPI.Models.User", "User")
                        .WithMany("Categories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartPocketAPI.Models.Movement", b =>
                {
                    b.HasOne("SmartPocketAPI.Models.Category", "Category")
                        .WithMany("Movements")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartPocketAPI.Models.PaymentMethod", "CreditCardPayment")
                        .WithMany("Payments")
                        .HasForeignKey("CreditCardPaymentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartPocketAPI.Models.MovementType", "MovementType")
                        .WithMany("Movements")
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartPocketAPI.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Movements")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartPocketAPI.Models.RecurringPayment", "RecurringPayment")
                        .WithMany("Movements")
                        .HasForeignKey("RecurringPaymentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartPocketAPI.Models.User", "User")
                        .WithMany("Movements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreditCardPayment");

                    b.Navigation("MovementType");

                    b.Navigation("PaymentMethod");

                    b.Navigation("RecurringPayment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartPocketAPI.Models.PaymentMethod", b =>
                {
                    b.HasOne("SmartPocketAPI.Models.PaymentMethodType", "PaymentMethodType")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("PaymentMethodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPocketAPI.Models.User", "User")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethodType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartPocketAPI.Models.RecurringPayment", b =>
                {
                    b.HasOne("SmartPocketAPI.Models.Category", "Category")
                        .WithMany("RecurringPayments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartPocketAPI.Models.PaymentMethod", "CreditCardPayment")
                        .WithMany("RecurringPaymentCredits")
                        .HasForeignKey("CreditCardPaymentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("SmartPocketAPI.Models.Frequency", "Frequency")
                        .WithMany("RecurringPayments")
                        .HasForeignKey("FrecuencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartPocketAPI.Models.MovementType", "MovementType")
                        .WithMany("RecurringPayments")
                        .HasForeignKey("MovementTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartPocketAPI.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("RecurringPayments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SmartPocketAPI.Models.User", "User")
                        .WithMany("RecurringPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CreditCardPayment");

                    b.Navigation("Frequency");

                    b.Navigation("MovementType");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartPocketAPI.Models.Category", b =>
                {
                    b.Navigation("Movements");

                    b.Navigation("RecurringPayments");
                });

            modelBuilder.Entity("SmartPocketAPI.Models.Frequency", b =>
                {
                    b.Navigation("RecurringPayments");
                });

            modelBuilder.Entity("SmartPocketAPI.Models.MovementType", b =>
                {
                    b.Navigation("Movements");

                    b.Navigation("RecurringPayments");
                });

            modelBuilder.Entity("SmartPocketAPI.Models.PaymentMethod", b =>
                {
                    b.Navigation("Movements");

                    b.Navigation("Payments");

                    b.Navigation("RecurringPaymentCredits");

                    b.Navigation("RecurringPayments");
                });

            modelBuilder.Entity("SmartPocketAPI.Models.PaymentMethodType", b =>
                {
                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("SmartPocketAPI.Models.RecurringPayment", b =>
                {
                    b.Navigation("Movements");
                });

            modelBuilder.Entity("SmartPocketAPI.Models.User", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Movements");

                    b.Navigation("PaymentMethods");

                    b.Navigation("RecurringPayments");
                });
#pragma warning restore 612, 618
        }
    }
}
